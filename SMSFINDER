import os
import time
import random
import logging
import requests
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import undetected_chromedriver as uc

# --- CONFIGURATION ---
WEBHOOK_URL = "" Discord Webhook
CHROMEDRIVER_PATH = r"" # Chrome Driver Path
KEYWORD = "Roblox"
HEADLESS = False
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
DELAY_RANGE = (1.0, 2.5)
CHECKED_FILE = "checked_numbers.txt"
LOG_FILE = "scraper.log"

logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format='%(asctime)s %(levelname)s:%(message)s')

def random_delay():
    time.sleep(random.uniform(*DELAY_RANGE))

def send_to_discord(number, link, site):
    data = {"content": f"Site: {site}\nNumber: {number}\nLink: {link}"}
    try:
        response = requests.post(WEBHOOK_URL, json=data)
        if response.status_code in (200, 204):
            logging.info(f"Sent to Discord: {number} ({site})")
        else:
            logging.error(f"Failed to send to Discord: {response.status_code} {response.text}")
    except Exception as e:
        logging.error(f"Error sending to Discord: {e}")

def setup_driver():
    options = uc.ChromeOptions()
    if HEADLESS:
        options.headless = True
    options.add_argument(f"user-agent={USER_AGENT}")
    driver = uc.Chrome(options=options, executable_path=CHROMEDRIVER_PATH)
    return driver

def close_popups(driver):
    try:
        driver.execute_script("""
            var popups = document.querySelectorAll('.popup, .modal, .adsbox, .close, .popup-close');
            popups.forEach(function(p) { p.remove(); });
        """)
    except Exception:
        pass

def load_checked_numbers():
    if not os.path.exists(CHECKED_FILE):
        return set()
    with open(CHECKED_FILE, 'r', encoding='utf-8') as f:
        return set(line.strip() for line in f if line.strip())

def save_checked_number(number):
    with open(CHECKED_FILE, 'a', encoding='utf-8') as f:
        f.write(number + '\n')

# --- SITE CONFIGS ---
SITES = [
    {
        "name": "smstome.com",
        "base_url": "https://smstome.com/",
        "country_xpath": "//a[contains(@href, '/country/')]",
        "number_xpath": "//a[contains(@href, '/phone/')]",
        "sms_table_xpath": "//table",
        "sms_message_xpath": lambda keyword: f"//td[contains(translate(., '{keyword.upper()}', '{keyword.lower()}'), '{keyword.lower()}')]",
        "pagination_selector": "div.pagination a",
        "page_param": "?page={page}",
    },
    {
        "name": "smsreceivefree.com",
        "base_url": "https://smsreceivefree.com/",
        "country_xpath": "//a[contains(@href, '/country/')]",
        "number_xpath": "//a[contains(@href, '/info/')]",
        "sms_table_xpath": "//table",
        "sms_message_xpath": lambda keyword: f"//td[contains(translate(., '{keyword.upper()}', '{keyword.lower()}'), '{keyword.lower()}')]",
        "pagination_selector": "div.pagination a",
        "page_param": "?page={page}",
    },
    {
        "name": "receive-smss.com",
        "base_url": "https://receive-smss.com/",
        "country_xpath": "//a[contains(@href, '/countries/')]",
        "number_xpath": "//a[contains(@href, '/number/')]",
        "sms_table_xpath": "//table",
        "sms_message_xpath": lambda keyword: f"//td[contains(translate(., '{keyword.upper()}', '{keyword.lower()}'), '{keyword.lower()}')]",
        "pagination_selector": "div.pagination a",
        "page_param": "?page={page}",
    },
    # Add more sites here!
]

def get_total_pages(driver, pagination_selector):
    for _ in range(10):
        pagination = driver.find_elements(By.CSS_SELECTOR, pagination_selector)
        page_numbers = [btn.text.strip() for btn in pagination if btn.text.strip().isdigit()]
        if page_numbers:
            return int(page_numbers[-1])
        time.sleep(0.5)
    return 1

def scrape_site(driver, site):
    print(f"\n--- Scraping {site['name']} ---")
    driver.get(site["base_url"])
    random_delay()
    close_popups(driver)
    country_links = driver.find_elements(By.XPATH, site["country_xpath"])
    for cidx in range(len(country_links)):
        try:
            country_links = driver.find_elements(By.XPATH, site["country_xpath"])
            c = country_links[cidx]
            country_name = c.text.strip()
            country_url = c.get_attribute('href')
            if country_url and not country_url.startswith("http"):
                country_url = site["base_url"].rstrip('/') + country_url
            scrape_country(driver, site, country_url, country_name)
        except Exception as e:
            logging.error(f"Error in country loop: {e}")

def scrape_country(driver, site, country_url, country_name):
    driver.get(country_url)
    random_delay()
    close_popups(driver)
    total_pages = get_total_pages(driver, site["pagination_selector"])
    for page in range(1, total_pages + 1):
        try:
            if page > 1:
                driver.get(f"{country_url}{site['page_param'].format(page=page)}")
                random_delay()
            checked_numbers = load_checked_numbers()
            numbers = driver.find_elements(By.XPATH, site["number_xpath"])
            print(f"\n# {country_name} Numbers (Page {page}): {len(numbers)} numbers")
            for nidx in range(len(numbers)):
                try:
                    numbers = driver.find_elements(By.XPATH, site["number_xpath"])
                    n = numbers[nidx]
                    number_text = n.text.strip()
                    number_href = n.get_attribute('href')
                    if number_text in checked_numbers:
                        continue
                    if number_href and not number_href.startswith("http"):
                        number_href = site["base_url"].rstrip('/') + number_href
                    print(f"#{nidx+1} {number_text}", end=' ')
                    scrape_number(driver, site, number_text, number_href)
                    save_checked_number(number_text)
                    # Return to the correct page after each number
                    driver.get(f"{country_url}{site['page_param'].format(page=page)}" if page > 1 else country_url)
                    random_delay()
                    close_popups(driver)
                except Exception as e:
                    logging.error(f"Error in number loop for {country_name} {number_text}: {e}")
        except Exception as e:
            logging.error(f"Error in page loop for {country_name} page {page}: {e}")

def scrape_number(driver, site, number_text, number_href):
    try:
        driver.get(number_href)
        random_delay()
        close_popups(driver)
        try:
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, site["sms_table_xpath"]))
            )
        except Exception:
            pass
        total_sms_pages = get_total_pages(driver, site["pagination_selector"])
        found = False
        for sms_page in range(1, total_sms_pages + 1):
            try:
                if sms_page > 1:
                    driver.get(f"{number_href}{site['page_param'].format(page=sms_page)}")
                    random_delay()
                    close_popups(driver)
                    try:
                        WebDriverWait(driver, 10).until(
                            EC.presence_of_element_located((By.XPATH, site["sms_table_xpath"]))
                        )
                    except Exception:
                        pass
                message_xpath = site["sms_message_xpath"](KEYWORD)
                messages = driver.find_elements(By.XPATH, message_xpath)
                print("#", end='', flush=True)
                if messages:
                    send_to_discord(number_text, f"{number_href}{site['page_param'].format(page=sms_page)}", site['name'])
                    found = True
            except Exception as e:
                logging.error(f"Error in SMS page loop for {number_text} page {sms_page}: {e}")
        if not found:
            logging.info(f"No '{KEYWORD}' found for {number_text}")
        print()  # Newline after progress bar
    except Exception as e:
        logging.error(f"Error checking number {number_text}: {e}")

if __name__ == "__main__":
    try:
        driver = setup_driver()
        for site in SITES:
            scrape_site(driver, site)
    except Exception as e:
        print("FATAL ERROR:")
        import traceback
        traceback.print_exc()
    finally:
        try:
            driver.quit()
        except:
            pass
